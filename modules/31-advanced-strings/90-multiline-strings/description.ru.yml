---

name: Multi-line строки
theory: |

  Представьте что нам нужно определить строку, которая состоит из нескольких строчек, то есть внутри есть переводы строки `\n`. Она будет выглядеть как-то так:

  ```python
  text = 'Пример текста,\nсостоящего из\nнескольких строк'
  ```

  На печати строка пример совсем другой вид:

  <pre class='hexlet-basics-output'>
    Пример текста,
    состоящего из
    нескольких строк
  </pre>

  Для таких ситуаций, в Python добавили еще один способ создания строк, который называется multi-line строки. Чтобы описать такую "многострочную строку", нужно заключить её в тройные кавычки - `"""` или `'''`. Внутри multi-line строки можно переносить текст без использования перевода строки `\n`.

  ```python
  text = '''Пример текста,
  состоящего из
  нескольких строк
  '''
  ```

  <pre class='hexlet-basics-output'>
    Пример текста,
    состоящего из
    нескольких строк

  </pre>

  Обратите внимание на то, что в конце текста есть пустая строка. Эта строка появилась в тексте потому, что мы поставили закрывающие кавычки `'''` на новой строке. Если не переносить закрывающие кавычки на новую строку, эта пустая строка в тексте не появится.

  ```python
  text = '''Пример текста,
  состоящего из
  нескольких строк'''
  ```

  <pre class='hexlet-basics-output'>
    Пример текста,
    состоящего из
    нескольких строк
  </pre>

  Multi-line строки, из-за использования тройных кавычек, позволяют не экранировать кавычки внутри строки:

  <pre class='hexlet-basics-output'>
    Здесь не нужно экранировать одинарные кавычки ' и двойные "
  </pre>

  И multi-line строки могут становиться f-строками, для интерполяции:

  ```python
  a = 'A'
  b = 'B'

  # Слева добавился f
  text = f'''{a} и {b}
  сидели на трубе
  '''
  ```

  <pre class='hexlet-basics-output'>
  А и B
  сидели на трубе
  </pre>

instructions: |

  Запишите в переменную `text` текст, который приведен ниже. Используйте тройные кавычки.

  ```
  Lannister, Targaryen, Baratheon, Stark, Tyrell...
  they're all just spokes on a wheel.
  This one's on top, then that one's on top, and on and on it spins,
  crushing those on the ground.
  ```

definitions: []

tips: []
