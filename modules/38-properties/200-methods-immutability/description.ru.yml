---

name: Неизменяемость
theory: |

  Что напечатает на экран последний вызов?

  ```python
  name = 'Tirion'
  print(name.upper())  # => TIRION
  print(name)  # => ?
  ```

  Ответ на этот вопрос зависит от того, как вы поняли урок про [неизменяемость примитивных типов данных](https://ru.code-basics.com/languages/python/lessons/immutability-of-primitive-types). Вызов метода `.upper()` возвращает новое значение, в котором все буквы преобразованы в верхний регистр, но он не меняет (и не может этого сделать) исходную строку. Поэтому внутри переменной окажется старое значение: `'Tirion'`. Эта логика справедлива для методов всех примитивных типов.

  Более того, попытка изменить значение атрибутов этих данных приведёт к ошибке:

  ```python
  num = (1+3j)
  num.real = 5
  # Traceback (most recent call last):
  #   File "<stdin>", line 1, in <module>
  # AttributeError: readonly attribute
  ```

  Вместо изменения значения можно _заменить_ значение. Для этого понадобятся переменные:

  ```python
  name = 'Tirion'
  name = name.upper()
  print(name)  # => TIRION
  ```

instructions: |

  Данные, вводимые пользователями, часто содержат лишние пробельные символы в конце или начале строки. Обычно их вырезают с помощью метода `.strip()`, например, было: `'   hello\n '`, стало: `'hello'`.
  Обновите переменную `first_name`, записав в неё то же самое значение, но обработанное методом `.strip()`. Распечатайте то, что получилось, на экран.

tips: []
