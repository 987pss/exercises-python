---

name: Именованные аргументы
theory: |

  Существует два типа аргументов, то есть данных, передающихся в вызов функции. Первый тип - позиционные, они передаются в том же порядке, в котором определены параметры функции:

  ```python
  # (text, length)
  truncate('My Text', 3)
  ```

  Другой тип - именнованные (named или keyword), такие аргументы передаются не просто как значения, а как пара "имя=значение", что позволяет передавать их в любом порядке:

  ```python
  # Аргументы переданы в другом порядке
  truncate(length=3, text='My Text')
  ```

  По сути, это та же самая функция что и выше. Использовать позиционные или именованные параметры - зависит от того, кто вызывает функцию. Существует две причины использовать именованные аргументы:

  1. Иногда это повышает читаемость, так как сразу видны имена
  2. Если у функции много необязательных параметров, то именованные аргументы позволяют не указывать все промежуточные параметры, которые нам сейчас не нужны. Посмотрите на пример:

  ```python
  def f(a=1,b=2,c=3,d=4):

  # Хотим передать только d, но приходится передавать все
  f(1, 2, 3, 8)

  # Именованные аргументы позволяют передавать только d
  # Остальное останется по умолчанию
  f(d=8)
  ```

  Именованные аргументы можно передавать одновременно с позиционными. В таком случае позиционные должны идти в самом начале:

  ```python
  # передаем только a (позиционно) и d (как именованный)
  f(3, d=3)
  ```

  Сейчас важно только знать, что такая возможность существует, потому что вы будете видеть ее в примерах кода, но то, как она конкретно работает, запомнится только с практикой.

instructions: |

  Реализуйте функцию `capitalize()`, которая принимает непустую строку и приводит первую букву первого слова к верхнему регистру:

    ```python
    name = 'arya'
    print(capitalize(name)) # => "Arya"
    ```
