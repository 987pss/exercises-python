---

name: Параметры функций
theory: |

  Функции могут не только возвращать значения, но и принимать их в виде параметров. С параметрами функций мы уже сталкивались много раз:

  ```python
  # Принимает на вход один параметр любого типа
  print('я параметр')
  # Принимает на вход два строковых параметра
  # первый – что ищем, второй – на что меняем
  'google'.replace('go', 'mo') # moogle
  # Принимает на вход два числовых параметра
  # первый – округляемое число, второй – число знаков после запятой, которые нужно оставить
  round(10.23456, 3) # 10.235
  ```

  В этом уроке мы научимся создавать функции, которые принимают на вход параметры. Представим, что перед нами стоит задача – реализовать функцию `get_last_char()`, возвращающую последний символ в строке, переданной ему на вход как параметр. Вот как будет выглядеть использование этой функции:

  ```python
  # Передача параметров напрямую без переменных
  get_last_char("Hexlet") # t
  # Передача параметров через переменные
  name1 = 'Hexlet'
  get_last_char(name1) # t
  name2 = 'Goo'
  get_last_char(name2) # o
  ```

  Из описания и примеров кода мы можем сделать следующие выводы:

  * Нам нужно определить функцию `get_last_char()`
  * Функция должна принимать на вход один параметр строкового типа
  * Функция должна возвращать значение строкового типа

  Определение функции:

  ```python
  def get_last_char(text):
      return text[-1]
  ```

  Разберем его. В скобках указывается имя переменной `text`, которая служит нам параметром. Имя параметра может быть любым, главное, чтобы оно отражало смысл того значения, которое содержится внутри. Мы могли бы определить функцию и так:

  ```python
  def get_last_char(string):
      return string[-1]
  ```

  Конкретное значение параметра будет зависеть от вызова этой функции.

  ```python
  # Внутри функции string будет равна 'hexlet'
  get_last_char('hexlet') # t

  # Внутри функции string будет равна 'code'
  get_last_char('code') # e

  # Внутри функции string будет равна 'Winter is coming'
  # имя переменной снаружи не связанно с именем переменной в определении функции
  text = 'Winter is coming'
  get_last_char(text) # g
  ```

  Этот параметр является обязательным. Если попробовать вызвать функцию без параметра, то интерпретатор выдаст ошибку:

  ```python
  get_last_char() # такой код не имеет смысла

  TypeError: get_last_char() missing 1 required positional argument: 'string'
  ```

  Многие функции работают одновременно с несколькими параметрами, например, для округления числа нужно указать не только само число, но и количество знаков после запятой:

  ```python
  round(10.23456, 3) # 10.235
  ```

  Тоже самое относится и к методам. Они могут требовать на вход любое количество параметров, которое им нужно для работы:

  ```python
  # первый параметр – что ищем
  # второй параметр – на что меняем
  'google'.replace('go', 'mo') # moogle
  ````

  Для создания таких функций и методов, нужно в определении указать нужное количество параметров через запятую, дав им понятные имена. Ниже пример определения функции `replace()`, которая заменяет в слове одну часть строки на другую:

  ```python
  def replace(text, from, to):
      # здесь тело функции, но мы его
      # опускаем, чтобы не отвлекаться

  replace('google', 'go', 'mo') # moogle
  ```

  Когда параметров два и более, то практически для всех функций становится важен порядок передачи этих параметров. Если его поменять, то функция отработает по-другому:

  ```python
  # ничего не заменилось,
  # так как внутри google нет mo
  replace('google', 'mo', 'go') # google
  ```

instructions: |

  Реализуйте функцию `truncate()`, которая обрезает переданную строку до указанного количества символов, добавляет в конце троеточие и возвращает получившуюся строку. Подобная логика часто используется на сайтах, чтобы отобразить длинный текст в сокращенном виде.

  Функция принимает два параметра:

  1. Строка, которую нужно обрезать
  2. Число символов, которые нужно оставить

  Пример того, как должна работать написанная вами функция:

  ```python
  # Передаём текст напрямую
  # Обрезаем текст, оставляя 2 первых символа
  result = truncate('hexlet', 2)
  print(result) # he...

  # Через переменную
  text = 'it works!'
  # Обрезаем текст, оставляя 4 первых символа
  result = truncate(text, 4)
  print(result) # it w...
  ```

  Реализовать эту функцию можно различными способами, подскажем лишь один из них. Для решения этим способом вам понадобится взять подстроку из строки, переданной первым параметром в функцию. Используйте для этого срезы строк. Подумайте, исходя из задания, с какого индекса и по какой вам надо извлечь подстроку?

  ```python
  word = 'welcome!'
  index = 3
  word[:index] # wel
  ```
