---

name: Комбинирование операций и функций
theory: |

  Логические операции — это выражения. Значит, **логические операции можно комбинировать с другими выражениями**.

  Например, мы хотим проверить чётность числа, то есть кратность двум. В программировании используют такой подход: проверяют остаток от деления на 2:

  - если остаток 0, то число было чётным;
  - если остаток не 0, то число было нечётным.

  Остаток от деления — простая, но очень важная концепция в арифметике, алгебре, и даже в теории чисел и криптографии. Идея проста: нужно разделить число на несколько равных групп, и если в конце что-то останется — это и есть остаток от деления.

  Делим конфеты поровну между людьми:

  - 7 конфет, 2 человека: 2 x 3 + **остаток 1**.
    Значит, 7 не кратно 2.
  - 21 конфету, 3 человека: 3 x 7 + **остаток 0**.
    Значит, 21 кратно 3.
  - 19 конфет, 5 человек: 5 x 3 + **остаток 4**.
    Значит, 19 не кратно 5.

  Оператор `%` вычисляет остаток от деления (не путайте с делением):

  - `7 % 2` → `1`
  - `21 % 3` → `0`
  - `19 % 5` → `4`

  С помощью него напишем функцию проверки чётности:

  ```python
  def is_even(number):
      return number % 2 == 0

  print(is_even(10)) # => True
  print(is_even(3))  # => False
  ```

  В одном выражении мы скомбинировали логический оператор `==` (проверка равенства) и арифметический оператор `%`.

  **Приоритет арифметических операций выше логических.** Значит, сначала вычисляется арифметическое выражение `number % 2`, затем результат участвует в логическом сравнении.

  По-русски это можно расшифровать так: *«вычислить остаток от деления числа `number` на 2 и сравнить, равен ли остаток нулю, затем вернуть результат проверки равенства»*.

  Другой пример: напишем функцию, которая принимает строку и проверяет, начинается ли эта строка с латинской буквы `a`.

  Алгоритм:

  1. Получим и запишем в переменную первый символ из строки-аргумента.
  1. Сравним, равен ли символ латинской букве `a`.
  1. Вернём результат.

  ```python
  def is_first_letter_an_a(string):
      first_letter = string[0]
      return first_letter == 'a'

  print(is_first_letter_an_a('orange')) # => False
  print(is_first_letter_an_a('apple'))  # => True
  ```

instructions: |

  Реализуйте функцию `is_international_phone()`, которая проверяет формат указанного телефона. Если телефон начинается с *+*, значит это международный формат.

  ```python
  is_international_phone('89602223423')  # False
  is_international_phone('+79602223423') # True
  ```

tips: []
